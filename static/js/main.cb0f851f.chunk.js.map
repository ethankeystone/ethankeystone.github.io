{"version":3,"sources":["images/codinglogo.svg","pages/Base/Base.js","pages/Base/NavBar.js","pages/Explore/Block.js","pages/Explore/Explore.js","pages/AboutUs/AboutUs.js","pages/Home/Home.js","pages/PathFindingVisualizer/Node.js","pages/PathFindingVisualizer/Algorithms/Pathfinder.js","pages/PathFindingVisualizer/Algorithms/AStar.js","pages/PathFindingVisualizer/Algorithms/Dijkstra.js","pages/PathFindingVisualizer/PathFindingVisualizer.js","pages/PathFindingVisualizer/PathFindingVisualizerPage.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","Base","props","children","NavBar","className","src","logo","id","alt","to","style","textDecoration","React","Component","Block","undefined","this","link","title","paragragh","Explore","AboutUs","Home","Node","state","isLoading","color","isRendered","setState","col","row","setTimeout","bind","renderTime","addNode","handleMouseDown","handleMouseUp","handleMouseOver","weight","onMouseEnter","onMouseDown","Pathfinder","grid","startNode","endNode","height","length","width","order","Array","openListOrder","pathOrder","previous","fill","map","orderIndex","currentBacktraceNode","push","node","neighbors","x","y","forEach","element","error","filter","Error","AStar","openList","closedList","gList","hList","run","smallestNode","getSmallestFCostNode","backtrace","splice","indexOf","getNeighbors","getDistance","neighborNewGScore","Contains","list","console","log","Math","abs","getFCost","Dijkstra","distance","order_index","next","Q","min_node","getMinDistanceNode","new_distance","getNodeDistance","min_distance","distance_temp","PathFindingVisualizer","mouseDown","currentSelection","stopAnimation","isRunningAnimation","algoSelection","mouseOverNode","i","currentRow","j","nodeState","resetGrid","update","$set","createGrid","weightvalue","algo","timeInterval","BreadthFirst","output","finalPath","finalPathCount","count","stop","setInterval","clearInterval","onClick","generateRandomGrid","findPath","htmlFor","onChange","option","target","value","onMouseUp","key","PathFindingVisualizerPage","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb0f851f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/codinglogo.2f2547cc.svg\";","import React from \"react\";\nimport logo from \"../../images/codinglogo.svg\";\nimport {Link} from \"react-router-dom\";\nimport \"../../css/NavBar.css\";\n\nexport default function Base(props) {\n    return (\n            <div>\n                {props.children}\n            </div>\n        );\n}\n","import React from \"react\";\nimport logo from \"../../images/codinglogo.svg\";\nimport {Link} from \"react-router-dom\";\nimport \"../../css/NavBar.css\";\n\nexport default class NavBar extends React.Component {\n    render() {\n        return (\n                <header>\n                    <div className = \"container\">\n                    <img src={logo} className=\"App-logo\" id=\"App-logo\" alt=\"logo\" />\n                    <h1>\n                        <Link to=\"/\" style={{ textDecoration: 'none'}} className = \"button\">\n                          Coding Imagined\n                        </Link>\n                    </h1>\n                    <nav className=\"App-Header\">\n                        <ul className=\"buttons\">\n                            <li>\n                                <Link to=\"/explore\" style={{ textDecoration: 'none'}} className = \"button\">\n                                    Explore\n                                </Link>\n                            </li>\n                            <li>\n                                <Link to=\"/about\" style={{ textDecoration: 'none'}} className = \"button\">\n                                About Us\n                                </Link>\n                            </li>\n                            <li>\n                                <Link to=\"/morestuff\" style={{ textDecoration: 'none'}} className = \"button\">\n                                More Stuff\n                                </Link>\n                            </li>\n                            <li>\n                                <Link to=\"/evenMoreStuff\" style={{ textDecoration: 'none'}} className = \"button\">\n                                Even More Stuff\n                                </Link>\n                            </li>\n                        </ul>\n                    </nav>\n                    </div>\n                </header>\n            );\n    }\n}\n","import React, { Component } from \"react\";\nimport logo from \"../../images/codinglogo.svg\";\nimport \"../../css/Block.css\";\nimport {Link} from \"react-router-dom\";\n\nexport default class Block extends React.Component {\n    render() {\n        return (\n                <Link to={this.props.link == undefined ? \"/\" : this.props.link} className=\"block\" style={{ textDecoration: 'none' }}>\n                    <div className=\"title\"> {this.props.title} </div>\n                        <img src={logo} className=\"image\"/>\n                        <div className=\"projectDescription\">\n                        {this.props.paragragh}\n                    </div>\n                </Link>\n            );\n    }\n}\n","import React from \"react\";\nimport NavBar from \"../Base/NavBar\";\nimport Block from \"./Block\";\nimport \"../../css/Explore.css\";\n\nexport default function Explore() {\n    return (\n            <div>\n                <NavBar></NavBar>\n\n                <div className=\"blocks\">\n                    <Block\n                        link=\"/PathFindingVisualizer\"\n                        title=\"Path Finding Visualizer\"\n                        paragragh=\"This is a pathfinding visualzer that attempts\n                        to display the ability of several algorthms.\n                        Some included are Dijstrikas, AStar, and other funs things!\"\n                    ></Block>\n                    <Block></Block>\n                    <Block></Block>\n                    <Block></Block>\n                    <Block></Block>\n                </div>\n            </div>\n        );\n}\n","import React from \"react\";\nimport NavBar from \"../Base/NavBar.js\";\n\nexport default function AboutUs() {\n    return (\n            <div>\n                <NavBar></NavBar>\n                <div>\n                   About Us\n                </div>\n            </div>\n\n        );\n}\n","import React from \"react\";\nimport NavBar from \"../Base/NavBar.js\";\n\nexport default function Home() {\n\n    return (\n            <div className=\"App\">\n                <NavBar></NavBar>\n                <div>This is the home page</div>\n            </div>\n        );\n\n}\n","import React, { Component } from 'react';\r\nimport \"../../css/Node.css\"\r\n\r\nexport default class Node extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false,\r\n            color: \"none\",\r\n            isRendered: this.props.isRendered\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            isLoading: false,\r\n            color: \"none\",\r\n            col: this.props.col,\r\n            row: this.props.row,\r\n            isRendered: false\r\n        });\r\n\r\n        setTimeout(\r\n            function () {\r\n                this.setState({ isRendered: true })\r\n            }.bind(this),\r\n            this.props.renderTime * 5\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            col,\r\n            row,\r\n            addNode,\r\n            state,\r\n            handleMouseUp,\r\n            handleMouseDown,\r\n            handleMouseOver,\r\n            weight\r\n        } = this.props;\r\n\r\n        if (this.state.isLoading === true) {\r\n            return (\r\n                <div className={\"node \"}>\r\n                    Yikes\r\n                    </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className={(this.state.isRendered === true ? \"nodeRendered \" + state : \"nodeNotRendered\")}\r\n                    onMouseEnter={() => handleMouseOver(col, row)}\r\n                    onMouseDown={() => { handleMouseDown(col, row) }}\r\n                    //onMouseEnter={() => addNode(col, row)}\r\n                //onMouseUp={() => handleMouseUp()}\r\n                > \r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n","export default class Pathfinder {\r\n  constructor(grid, startNode, endNode) {\r\n    //initialization\r\n    this.grid = grid;\r\n    this.startNode = startNode;\r\n    this.endNode = endNode;\r\n\r\n    //accessibility\r\n    this.height = grid.length;\r\n    this.width = grid[0].length;\r\n\r\n    //stores order that nodes were added\r\n    this.order = new Array();\r\n\r\n    //stores an array of the openList array at every stage\r\n    this.openListOrder = new Array();\r\n\r\n    //stores order of backtrace for actual pathfinding\r\n    this.pathOrder = new Array();\r\n\r\n    //stores traceback - all nodes parent nodes\r\n    this.previous = new Array(this.height)\r\n      .fill({})\r\n      .map(() => new Array(this.width).fill({}));\r\n\r\n    //this.next() adds 1 before returning so this index\r\n    //is negetive one for the first iteration to return\r\n    //order [0]\r\n    this.orderIndex = -1;\r\n  }\r\n\r\n  //backtraces when algorithm is done running\r\n  backtrace() {\r\n    let currentBacktraceNode = this.endNode;\r\n    while (currentBacktraceNode != this.startNode) {\r\n      this.pathOrder.push(currentBacktraceNode);\r\n      currentBacktraceNode = this.previous[currentBacktraceNode.col][currentBacktraceNode.row];\r\n    }\r\n  }\r\n\r\n  //i dont know\r\n\r\n  //grabs neighbor nodes, if there are 2-3, array size = 2-3\r\n  //neighbors are nodes in 4 cardinal directions\r\n  getNeighbors(\r\n    node // i hate this i feel like im losing brain cells\r\n  ) {\r\n    let neighbors = [];\r\n\r\n    let x = node[\"col\"];\r\n    let y = node[\"row\"];\r\n\r\n    //4 directions\r\n    let positions = [\r\n      [-1, 0],\r\n      [1, 0],\r\n      [0, -1],\r\n      [0, 1]\r\n    ];\r\n\r\n    //for loop so i can try catch w o using max and mins and such\r\n    positions.forEach(element => {\r\n      try {\r\n        if (element.state != \"wall\")\r\n          neighbors.push(this.grid[x + element[0]][y + element[1]]);\r\n      } catch (error) { }\r\n    });\r\n\r\n    //idk why this happens :/\r\n    neighbors = neighbors.filter(element => {\r\n      return element != undefined;\r\n    });\r\n\r\n    return neighbors;\r\n  }\r\n\r\n  //returns the next node and next openList and updates index\r\n  next() {\r\n    this.orderIndex++;\r\n    if (this.orderIndex >= this.order.length) return false;\r\n    return [this.order[this.orderIndex], this.openListOrder[this.orderIndex]];\r\n  }\r\n\r\n  //closest thing to an abstract class\r\n  run() {\r\n    throw new Error(\"You need to impliment run()\");\r\n  }\r\n}\r\n","import Pathfinder from \"./Pathfinder\";\r\n\r\nexport default class AStar extends Pathfinder {\r\n  constructor(grid, startNode, endNode) {\r\n    //initialize\r\n    super(grid, startNode, endNode);\r\n\r\n    this.openList = new Array();\r\n    this.closedList = new Array();\r\n\r\n    //G Score: distance from curent node to start node (heuristically)\r\n    //H Score: distance from current node to end node\r\n    this.gList = new Array(this.height)\r\n      .fill(10000)\r\n      .map(() => new Array(this.width).fill(10000));\r\n    this.hList = new Array(this.height)\r\n      .fill(10000)\r\n      .map(() => new Array(this.width).fill(10000));\r\n\r\n    this.run();\r\n  }\r\n\r\n  //full algorithm\r\n  run() {\r\n    //return;\r\n    //openList starts with default of first node\r\n    this.openList.push(this.grid[this.startNode[\"col\"]][this.startNode[\"row\"]]);\r\n\r\n    //set starting node to 0\r\n    this.gList[this.startNode[\"col\"]][this.startNode[\"row\"]] = 0;\r\n\r\n    while (this.openList.length > 0) {\r\n      //smallestNode = smallest f cost\r\n      let smallestNode = this.getSmallestFCostNode();\r\n\r\n      //check while conditional\r\n      if (smallestNode == this.endNode) {\r\n        this.backtrace();\r\n        return;\r\n      }\r\n\r\n      //STORE FOR ETHAN\r\n      this.order.push(smallestNode);\r\n      this.openListOrder.push(this.openList);\r\n\r\n      //remove from openList\r\n      this.openList.splice(this.openList.indexOf(smallestNode), 1);\r\n\r\n      //all successor nodes are neighbors in 4 cardinal directions\r\n      let neighbors = this.getNeighbors(smallestNode);\r\n\r\n      neighbors.forEach(element => {\r\n        if (element.state === \"wall\") return;\r\n        //set distance from end node\r\n        this.hList[element[\"col\"]][element[\"row\"]] = this.getDistance(element);\r\n        //get current and score after travel\r\n        let smallestNodeGScore = this.gList[smallestNode[\"col\"]][\r\n          smallestNode[\"row\"]\r\n        ];\r\n        let neighborNewGScore = smallestNodeGScore + 5; //weight as 5 for now\r\n\r\n        //if path is better than any previous\r\n        if (neighborNewGScore < this.gList[element[\"col\"]][element[\"row\"]]) {\r\n          //update new g score\r\n          this.gList[element[\"col\"]][element[\"row\"]] = neighborNewGScore;\r\n          this.previous[element.col][element.row] = smallestNode;\r\n\r\n          //add neighbor to openList\r\n          if (!this.Contains(this.openList, element)) {\r\n            this.openList.push(element);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n\r\n    //open set is empty but goal never reached\r\n    return -1;\r\n  }\r\n\r\n  //simple helper function, takes in list and element and returns true if element in list\r\n  Contains(list, element) {\r\n    if (list.indexOf(element) != -1) {\r\n      console.log(list.indexOf(element));\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  //returns heuristic distance to endNode -> _| not /\r\n  getDistance(node) {\r\n    let distanceX = Math.abs(node[\"col\"] - this.endNode[\"col\"]) * 5;\r\n    let distanceY = Math.abs(node[\"row\"] - this.endNode[\"row\"]) * 5;\r\n    return distanceX + distanceY;\r\n  }\r\n\r\n  //returns the smallest cost node\r\n  getSmallestFCostNode() {\r\n    let smallestNode = this.openList[0];\r\n    this.openList.forEach(node => {\r\n      if (this.getFCost(node) < this.getFCost(smallestNode)) {\r\n        smallestNode = node;\r\n      }\r\n      return node;\r\n    });\r\n    return smallestNode;\r\n  }\r\n\r\n  //takes in node and returns its fcost\r\n  getFCost(node) {\r\n    let GCost = this.gList[node[\"col\"]][node[\"row\"]];\r\n    let HCost = this.hList[node[\"col\"]][node[\"row\"]];\r\n    let FCost = GCost + HCost;\r\n    return FCost;\r\n  }\r\n}\r\n","import Pathfinder from \"./Pathfinder\";\r\n\r\nexport default class Dijkstra extends Pathfinder {\r\n  constructor(grid, startNode, endNode) {\r\n    super(grid, startNode, endNode);\r\n\r\n    this.distance = new Array(this.height)\r\n      .fill(10000)\r\n      .map(() => new Array(this.width).fill(10000));\r\n\r\n    this.run();\r\n\r\n    while (this.order_index < this.width * this.height) {\r\n      console.log(this.next());\r\n    }\r\n  }\r\n\r\n  //main function, returns grid\r\n  run() {\r\n    //make Q into list of all nodes\r\n    const Q = [];\r\n    for (let x = 0; x < this.grid.length; x++) {\r\n      for (let y = 0; y < this.grid[0].length; y++) {\r\n        Q.push(this.grid[x][y]);\r\n      }\r\n    }\r\n\r\n    //set distance of start node to smallest value, 0\r\n    this.distance[this.startNode[\"col\"]][this.startNode[\"row\"]] = 0;\r\n    //main alg\r\n    while (Q.length != 0) {\r\n      let min_node = this.getMinDistanceNode(Q);\r\n\r\n      if (min_node == this.endNode) break;\r\n      //remove min node from openlist\r\n      Q.splice(Q.indexOf(min_node), 1);\r\n\r\n      //for output\r\n      this.order.push(min_node);\r\n      this.openListOrder.push(Q);\r\n\r\n      let neighbors = this.getNeighbors(min_node);\r\n\r\n      //each neighbor gets new distance calculated based off current node, and updated if its new\r\n      //path has a smaller (more optimized) distance from start\r\n      neighbors.forEach(element => {\r\n        let new_distance = this.getNodeDistance(min_node) + 1; // right now all the weights are 1\r\n        if (new_distance < this.getNodeDistance(element)) {\r\n          this.distance[element[\"col\"]][element[\"row\"]] = new_distance;\r\n          this.previous[element[\"col\"]][element[\"row\"]] = min_node;\r\n        }\r\n      });\r\n    }\r\n\r\n    this.backtrace();\r\n\r\n    return this.distance;\r\n  }\r\n\r\n  //returns node in Q with minimum current distance\r\n  getMinDistanceNode(Q) {\r\n    let min_distance = 100000;\r\n    let min_node = Q[0];\r\n\r\n    Q.forEach(element => {\r\n      let distance_temp = this.distance[element[\"col\"]][element[\"row\"]];\r\n      if (distance_temp < min_distance && element.state != \"wall\") {\r\n        min_distance = distance_temp;\r\n        min_node = element;\r\n      }\r\n    });\r\n\r\n    return min_node;\r\n  }\r\n  //readonly\r\n  getNodeDistance(node) {\r\n    return this.distance[node[\"col\"]][node[\"row\"]];\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node\";\r\nimport update from 'immutability-helper';\r\nimport \"../../css/PathFindingVisualizer.css\";\r\nimport AStar from \"./Algorithms/AStar\"\r\nimport Dijkstra from \"./Algorithms/Dijkstra\"\r\nimport BreadthFirst from \"./Algorithms/BreadthFirst\"\r\nimport { scryRenderedDOMComponentsWithTag } from \"react-dom/test-utils\";\r\n\r\nexport default class PathFindingVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoading: true,\r\n            grid: null,\r\n            mouseDown: false,\r\n            currentSelection: \"1\",\r\n            stopAnimation: false,\r\n            isRunningAnimation: false,\r\n            algoSelection: \"1\",\r\n            startNode: { col: 7, row: 5 },\r\n            endNode: { col: 7, row: 30 },\r\n            mouseOverNode: null\r\n        };\r\n    }\r\n\r\n\r\n    createGrid() {\r\n        let width = 15;\r\n        let height = 40;\r\n        var grid = [];\r\n        var id = 0;\r\n\r\n        for (let i = 0; i < width; i++) {\r\n            const currentRow = [];\r\n            for (let j = 0; j < height; j++) {\r\n                let nodeState = \"none\"\r\n                if (i === this.state.startNode.col && j === this.state.startNode.row) {\r\n                    nodeState = \"start\";\r\n                } else if (i === this.state.endNode.col && j === this.state.endNode.row) {\r\n                    nodeState = \"end\";\r\n                }\r\n                let renderTime = j + i;\r\n                currentRow.push({\r\n                    col: i,\r\n                    row: j,\r\n                    state: nodeState,\r\n                    id: id,\r\n                    isRendered: false,\r\n                    renderTime: renderTime,\r\n                    weight: -1\r\n                });\r\n                id++;\r\n            }\r\n            grid.push(currentRow);\r\n        }\r\n        return (grid);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetGrid();\r\n    }\r\n\r\n\r\n\r\n    addNode(row, col) {\r\n        if (this.state.currentSelection === \"1\") {\r\n            this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"wall\" } } } }) });\r\n        }   \r\n        else if (this.state.currentSelection === \"3\") {\r\n            this.state.grid[this.state.startNode.col][this.state.startNode.row].state = \"none\";\r\n            this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"start\" } } } }) });\r\n            this.state.startNode = { col: col, row: row };\r\n        } else if (this.state.currentSelection === \"4\") {\r\n            this.state.grid[this.state.endNode.col][this.state.endNode.row].state = \"end\";\r\n            this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"end\" } } } }) });\r\n            this.state.endNode = { col: col, row: row };\r\n        }\r\n    }\r\n\r\n\r\n    handleMouseDown(row, col) {\r\n        if (this.state.mouseDown == false) return;\r\n\r\n        if (this.state.currentSelection === \"1\") {\r\n            this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"wall\" } } } }) });\r\n        }   \r\n        else if (this.state.currentSelection === \"3\") {\r\n            this.state.grid[this.state.startNode.col][this.state.startNode.row].state = \"none\";\r\n            this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"start\" } } } }) });\r\n            this.state.startNode = { col: col, row: row };\r\n        } else if (this.state.currentSelection === \"4\") {\r\n            this.state.grid[this.state.endNode.col][this.state.endNode.row].state = \"end\";\r\n            this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"end\" } } } }) });\r\n            this.state.endNode = { col: col, row: row };\r\n        }\r\n    }\r\n\r\n    handleMouseUp() {\r\n        //this.setState({ mouseDown: false });\r\n    }\r\n\r\n    resetGrid() {\r\n        this.state.stopAnimation = true;\r\n        this.setState({\r\n            isLoading: false,\r\n            grid: this.createGrid()\r\n        });\r\n    }\r\n\r\n    generateRandomGrid() {\r\n        let width = 15;\r\n        let height = 40;\r\n        var grid = [];\r\n        var id = 0;\r\n\r\n        let startNode = this.state.startNode;\r\n        let endNode = this.state.endNode;\r\n\r\n        for (let i = 0; i < width; i++) {\r\n            const currentRow = [];\r\n            for (let j = 0; j < height; j++) {\r\n                let nodeState = \"expand\"\r\n                if (i === startNode.col && j === startNode.row) {\r\n                    nodeState = \"start\";\r\n                } else if (i === endNode.col && j === endNode.row) {\r\n                    nodeState = \"end\";\r\n                }\r\n                currentRow.push({\r\n                    col: i,\r\n                    row: j,\r\n                    id: id,\r\n                    state: nodeState,\r\n                    weightvalue: 0,\r\n                    isRendered: false,\r\n                    weight: -1\r\n                });\r\n                id++;\r\n            }\r\n            grid.push(currentRow);\r\n        }\r\n        this.setState({\r\n            isLoading: false,\r\n            grid: grid\r\n        });\r\n    }\r\n\r\n    findPath() {\r\n        if (this.state.grid != null && !this.state.isRunningAnimation) {\r\n            let algo = null;\r\n            let timeInterval = 0;\r\n            if (this.state.algoSelection === \"1\") {\r\n                algo = new AStar(this.state.grid, this.state.grid[this.state.startNode.col][this.state.startNode.row], this.state.grid[this.state.endNode.col][this.state.endNode.row]);\r\n                timeInterval = 200;\r\n            } else if (this.state.algoSelection === \"2\") {\r\n                algo = new Dijkstra(this.state.grid, this.state.grid[this.state.startNode.col][this.state.startNode.row], this.state.grid[this.state.endNode.col][this.state.endNode.row]);\r\n                timeInterval = 50;\r\n            } else if (this.state.algoSelection === \"3\") {\r\n                algo = new BreadthFirst(this.state.grid, this.state.grid[this.state.startNode.col][this.state.startNode.row], this.state.grid[this.state.endNode.col][this.state.endNode.row]);\r\n            }\r\n            //redundant get rid of this if you dont need it ethan\r\n            if (this.state.isRunningAnimation) {\r\n                this.state.isRunningAnimation = false;\r\n            }\r\n\r\n            let output = algo.order;\r\n            let finalPath = algo.pathOrder;\r\n            let finalPathCount = algo.pathOrder.length - 1;\r\n\r\n            let count = 0;\r\n            let secondCount = 0;\r\n            var stop = setInterval(\r\n                    function(y) {\r\n                        y = count;\r\n                        if (y >= output.length) {\r\n                            if (finalPathCount >= 0) {\r\n                                this.setState({grid: update(this.state.grid, {[finalPath[finalPathCount].col]: {[finalPath[finalPathCount].row]: {state: {$set: \"secondaryExpand\"}}}})});\r\n                                finalPathCount--;\r\n                           } else {\r\n                               clearInterval(stop);\r\n                           }\r\n                        } else {\r\n                            this.setState({grid: update(this.state.grid, {[output[y].col]: {[output[y].row]: {state: {$set: \"expand\"}}}})});\r\n                            count++;\r\n                        }\r\n                        \r\n                    }.bind(this), \r\n                    count * timeInterval, count\r\n                );\r\n        this.state.isRunningAnimation = false;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        this.mouseDown = false;\r\n        if (this.state.isLoading) {\r\n            return <div></div>;\r\n        } else {\r\n            let grid = this.state.grid;\r\n            return (\r\n                <div className=\"center\">\r\n                    <button onClick={() => this.generateRandomGrid()}> Generate Maze </button>\r\n                    <button onClick={() => this.resetGrid()}> Reset Grid </button>\r\n                    <button onClick={() => this.findPath()}> Find Path </button>\r\n                    <label htmlFor=\"Weight\">Toggle Placement</label>\r\n                    <select id=\"Weight\" onChange={(option) => this.setState({ currentSelection: option.target.value })}>\r\n                        <option value=\"1\">Wall</option>\r\n                        <option value=\"2\">Weights</option>\r\n                        <option value=\"3\">Start Node</option>\r\n                        <option value=\"4\">End Node</option>\r\n                    </select>\r\n                    <label id=\"Algo\"> Select Algorithm </label>\r\n                    <select id=\"Algo\" onChange={(option) => this.setState({ algoSelection: option.target.value })}>\r\n                        <option value=\"1\"> A-Star </option>\r\n                        <option value=\"2\"> Dijkstra's </option>\r\n                        <option value=\"3\"> BreadthFirst </option>\r\n                    </select>\r\n                    <div onMouseDown={() => this.state.mouseDown = true} onMouseUp={() => this.state.mouseDown = false}>\r\n                        {grid.map(row => {\r\n                            return (\r\n                                <div key={row[0].col} className=\"row\">\r\n                                    {row.map(node => {\r\n                                        return <Node\r\n                                            col={node.col}\r\n                                            row={node.row}\r\n                                            key={node.id}\r\n                                            renderTime={node.renderTime}\r\n                                            addNode={() => this.addNode(node.row, node.col)}\r\n                                            handleMouseDown={() => this.addNode(node.row, node.col)}\r\n                                            handleMouseOver={() => this.handleMouseDown(node.row, node.col)}\r\n                                            //handleMouseUp={() => console.log(\"hihi\")}\r\n                                            state={node.state}\r\n                                            isRendered={false}\r\n                                            weight={node.weight}\r\n                                        ></Node>;\r\n                                    })}\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div >\r\n            );\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\nimport NavBar from \"../Base/NavBar.js\";\nimport PathFindingVisualizer from \"./PathFindingVisualizer.js\";\nimport \"../../css/PathFindingVisualizer.css\";\nexport default function PathFindingVisualizerPage() {\n    return (\n            <div className=\"app\">\n                <NavBar></NavBar>\n                <PathFindingVisualizer></PathFindingVisualizer>\n            </div>\n        );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport \"./css/App.css\";\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport Base from \"./pages/Base/Base\";\nimport Explore from \"./pages/Explore/Explore\";\nimport AboutUs from \"./pages/AboutUs/AboutUs\";\nimport Home from \"./pages/Home/Home\";\nimport PathFindingVisualizerPage from \"./pages/PathFindingVisualizer/PathFindingVisualizerPage\";\n\nexport default function App() {\n    return (\n            <div className=\"App\">\n                <Base>\n                    <Router>\n                        <Switch>\n                            <Route exact path=\"/\" component={Home}/>\n                            <Route path=\"/about\" component={AboutUs}/>\n                            <Route path=\"/explore\" component={Explore}/>\n                            <Route path=\"/PathFindingVisualizer\" component={PathFindingVisualizerPage}/>\n                        </Switch>\n                    </Router>\n                </Base>\n            </div>\n        );\n}\n"],"sourceRoot":""}