{"version":3,"sources":["pages/PathFindingVisualizer/Node.js","pages/PathFindingVisualizer/Algorithms/Pathfinder.js","pages/PathFindingVisualizer/Algorithms/AStar.js","pages/PathFindingVisualizer/Algorithms/Dijkstra.js","pages/PathFindingVisualizer/Algorithms/BreadthFirst.js","pages/PathFindingVisualizer/PathFindingVisualizer.js","serviceWorker.js","index.js","App.js"],"names":["Node","props","state","isLoading","color","isRendered","this","setState","col","row","setTimeout","bind","renderTime","addNode","handleMouseDown","handleMouseUp","handleMouseOver","weight","className","onMouseEnter","onMouseDown","Component","Pathfinder","grid","startNode","endNode","height","length","width","order","Array","openListOrder","pathOrder","previous","fill","map","orderIndex","currentBacktraceNode","push","node","neighbors","x","y","forEach","element","error","filter","undefined","Error","AStar","openList","closedList","gList","hList","run","smallestNode","getSmallestFCostNode","backtrace","splice","indexOf","getNeighbors","getDistance","neighborNewGScore","Contains","list","console","log","Math","abs","getFCost","Dijkstra","distance","order_index","next","Q","min_node","getMinDistanceNode","new_distance","getNodeDistance","min_distance","distance_temp","BreadthFirst","pop","PathFindingVisualizer","mouseDown","currentSelection","stopAnimation","isRunningAnimation","algoSelection","mouseOverNode","stop","id","i","currentRow","j","nodeState","resetGrid","update","$set","clearInterval","createGrid","random","weightvalue","algo","timeInterval","output","finalPath","finalPathCount","count","setInterval","onClick","generateRandomGrid","findPath","htmlFor","onChange","option","target","value","onMouseUp","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3582947.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"../../css/Node.css\"\n\nexport default class Node extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false,\n            color: \"none\",\n            isRendered: this.props.isRendered\n        }\n    }\n\n    componentDidMount() {\n        this.setState({\n            isLoading: false,\n            color: \"none\",\n            col: this.props.col,\n            row: this.props.row,\n            isRendered: false\n        });\n\n        setTimeout(\n            function () {\n                this.setState({ isRendered: true })\n            }.bind(this),\n            this.props.renderTime * 5\n        );\n    }\n\n    render() {\n        const {\n            col,\n            row,\n            addNode,\n            state,\n            handleMouseUp,\n            handleMouseDown,\n            handleMouseOver,\n            weight\n        } = this.props;\n\n        if (this.state.isLoading === true) {\n            return (\n                <div className={\"node \"}>\n                    Yikes\n                    </div>\n            );\n        } else {\n            return (\n                <div className={(this.state.isRendered === true ? \"nodeRendered \" + state : \"nodeNotRendered\")}\n                    onMouseEnter={() => handleMouseOver(col, row)}\n                    onMouseDown={() => { handleMouseDown(col, row) }}\n                    //onMouseEnter={() => addNode(col, row)}\n                //onMouseUp={() => handleMouseUp()}\n                > \n                </div>\n            );\n        }\n    }\n}\n","export default class Pathfinder {\n  constructor(grid, startNode, endNode) {\n    //initialization\n    this.grid = grid;\n    this.startNode = startNode;\n    this.endNode = endNode;\n\n    //accessibility\n    this.height = grid.length;\n    this.width = grid[0].length;\n\n    //stores order that nodes were added\n    this.order = new Array();\n\n    //stores an array of the openList array at every stage\n    this.openListOrder = new Array();\n\n    //stores order of backtrace for actual pathfinding\n    this.pathOrder = new Array();\n\n    //stores traceback - all nodes parent nodes\n    this.previous = new Array(this.height)\n      .fill({})\n      .map(() => new Array(this.width).fill({}));\n\n    //this.next() adds 1 before returning so this index\n    //is negetive one for the first iteration to return\n    //order [0]\n    this.orderIndex = -1;\n  }\n\n  //backtraces when algorithm is done running\n  backtrace() {\n    let currentBacktraceNode = this.endNode;\n    while (currentBacktraceNode != this.startNode) {\n      this.pathOrder.push(currentBacktraceNode);\n      currentBacktraceNode = this.previous[currentBacktraceNode.col][currentBacktraceNode.row];\n    }\n  }\n\n  //i dont know\n\n  //grabs neighbor nodes, if there are 2-3, array size = 2-3\n  //neighbors are nodes in 4 cardinal directions\n  getNeighbors(\n    node // i hate this i feel like im losing brain cells\n  ) {\n    let neighbors = [];\n\n    let x = node[\"col\"];\n    let y = node[\"row\"];\n\n    //4 directions\n    let positions = [\n      [-1, 0],\n      [1, 0],\n      [0, -1],\n      [0, 1]\n    ];\n\n    //for loop so i can try catch w o using max and mins and such\n    positions.forEach(element => {\n      try {\n        if (element.state != \"wall\")\n          neighbors.push(this.grid[x + element[0]][y + element[1]]);\n      } catch (error) { }\n    });\n\n    //idk why this happens :/\n    neighbors = neighbors.filter(element => {\n      return element != undefined;\n    });\n\n    return neighbors;\n  }\n\n  //returns the next node and next openList and updates index\n  next() {\n    this.orderIndex++;\n    if (this.orderIndex >= this.order.length) return false;\n    return [this.order[this.orderIndex], this.openListOrder[this.orderIndex]];\n  }\n\n  //closest thing to an abstract class\n  run() {\n    throw new Error(\"You need to impliment run()\");\n  }\n}\n","import Pathfinder from \"./Pathfinder\";\n\nexport default class AStar extends Pathfinder {\n  constructor(grid, startNode, endNode) {\n    //initialize\n    super(grid, startNode, endNode);\n\n    this.openList = new Array();\n    this.closedList = new Array();\n\n    //G Score: distance from curent node to start node (heuristically)\n    //H Score: distance from current node to end node\n    this.gList = new Array(this.height)\n      .fill(10000)\n      .map(() => new Array(this.width).fill(10000));\n    this.hList = new Array(this.height)\n      .fill(10000)\n      .map(() => new Array(this.width).fill(10000));\n\n    this.run();\n  }\n\n  //full algorithm\n  run() {\n    //return;\n    //openList starts with default of first node\n    this.openList.push(this.grid[this.startNode[\"col\"]][this.startNode[\"row\"]]);\n\n    //set starting node to 0\n    this.gList[this.startNode[\"col\"]][this.startNode[\"row\"]] = 0;\n\n    while (this.openList.length > 0) {\n      //smallestNode = smallest f cost\n      let smallestNode = this.getSmallestFCostNode();\n\n      //check while conditional\n      if (smallestNode == this.endNode) {\n        this.backtrace();\n        return;\n      }\n\n      //STORE FOR ETHAN\n      this.order.push(smallestNode);\n      this.openListOrder.push(this.openList);\n\n      //remove from openList\n      this.openList.splice(this.openList.indexOf(smallestNode), 1);\n\n      //all successor nodes are neighbors in 4 cardinal directions\n      let neighbors = this.getNeighbors(smallestNode);\n\n      neighbors.forEach(element => {\n        if (element.state === \"wall\") return;\n        //set distance from end node\n        this.hList[element[\"col\"]][element[\"row\"]] = this.getDistance(element);\n        //get current and score after travel\n        let smallestNodeGScore = this.gList[smallestNode[\"col\"]][\n          smallestNode[\"row\"]\n        ];\n        let neighborNewGScore = smallestNodeGScore + 5; //weight as 5 for now\n\n        //if path is better than any previous\n        if (neighborNewGScore < this.gList[element[\"col\"]][element[\"row\"]]) {\n          //update new g score\n          this.gList[element[\"col\"]][element[\"row\"]] = neighborNewGScore;\n          this.previous[element.col][element.row] = smallestNode;\n\n          //add neighbor to openList\n          if (!this.Contains(this.openList, element)) {\n            this.openList.push(element);\n          }\n        }\n      });\n    }\n\n\n    //open set is empty but goal never reached\n    return -1;\n  }\n\n  //simple helper function, takes in list and element and returns true if element in list\n  Contains(list, element) {\n    if (list.indexOf(element) != -1) {\n      console.log(list.indexOf(element));\n      return true;\n    }\n    return false;\n  }\n\n  //returns heuristic distance to endNode -> _| not /\n  getDistance(node) {\n    let distanceX = Math.abs(node[\"col\"] - this.endNode[\"col\"]) * 5;\n    let distanceY = Math.abs(node[\"row\"] - this.endNode[\"row\"]) * 5;\n    return distanceX + distanceY;\n  }\n\n  //returns the smallest cost node\n  getSmallestFCostNode() {\n    let smallestNode = this.openList[0];\n    this.openList.forEach(node => {\n      if (this.getFCost(node) < this.getFCost(smallestNode)) {\n        smallestNode = node;\n      }\n      return node;\n    });\n    return smallestNode;\n  }\n\n  //takes in node and returns its fcost\n  getFCost(node) {\n    let GCost = this.gList[node[\"col\"]][node[\"row\"]];\n    let HCost = this.hList[node[\"col\"]][node[\"row\"]];\n    let FCost = GCost + HCost;\n    return FCost;\n  }\n}\n","import Pathfinder from \"./Pathfinder\";\n\nexport default class Dijkstra extends Pathfinder {\n  constructor(grid, startNode, endNode) {\n    super(grid, startNode, endNode);\n\n    this.distance = new Array(this.height)\n      .fill(10000)\n      .map(() => new Array(this.width).fill(10000));\n\n    this.run();\n\n    while (this.order_index < this.width * this.height) {\n      console.log(this.next());\n    }\n  }\n\n  //main function, returns grid\n  run() {\n    //make Q into list of all nodes\n    const Q = [];\n    for (let x = 0; x < this.grid.length; x++) {\n      for (let y = 0; y < this.grid[0].length; y++) {\n        Q.push(this.grid[x][y]);\n      }\n    }\n\n    //set distance of start node to smallest value, 0\n    this.distance[this.startNode[\"col\"]][this.startNode[\"row\"]] = 0;\n    //main alg\n    while (Q.length != 0) {\n      let min_node = this.getMinDistanceNode(Q);\n\n      if (min_node == this.endNode) break;\n      //remove min node from openlist\n      Q.splice(Q.indexOf(min_node), 1);\n\n      //for output\n      this.order.push(min_node);\n      this.openListOrder.push(Q);\n\n      let neighbors = this.getNeighbors(min_node);\n\n      //each neighbor gets new distance calculated based off current node, and updated if its new\n      //path has a smaller (more optimized) distance from start\n      neighbors.forEach(element => {\n        let new_distance = this.getNodeDistance(min_node) + 1; // right now all the weights are 1\n        if (new_distance < this.getNodeDistance(element)) {\n          this.distance[element[\"col\"]][element[\"row\"]] = new_distance;\n          this.previous[element[\"col\"]][element[\"row\"]] = min_node;\n        }\n      });\n    }\n\n    this.backtrace();\n\n    return this.distance;\n  }\n\n  //returns node in Q with minimum current distance\n  getMinDistanceNode(Q) {\n    let min_distance = 100000;\n    let min_node = Q[0];\n\n    Q.forEach(element => {\n      let distance_temp = this.distance[element[\"col\"]][element[\"row\"]];\n      if (distance_temp < min_distance && element.state != \"wall\") {\n        min_distance = distance_temp;\n        min_node = element;\n      }\n    });\n\n    return min_node;\n  }\n  //readonly\n  getNodeDistance(node) {\n    return this.distance[node[\"col\"]][node[\"row\"]];\n  }\n}\n","import Pathfinder from \"./Pathfinder\"\n\nexport default class BreadthFirst extends Pathfinder {\n\n    constructor(grid, startNode, endNode) {\n        super(grid, startNode, endNode);\n    }\n\n    run() {\n        //queue\n        let Q = new Array();\n        Q.push(this.startNode);\n\n        while (Q.length > 0) {\n            //pop off Q rather than preferring anything\n            let node = Q.pop();\n\n            if (node == this.endNode) return;\n\n            let neighbors = this.getNeighbors(node);\n\n            neighbors.forEach(element => {\n\n            });\n\n        }\n    }\n}","import React, { Component } from \"react\";\nimport Node from \"./Node\";\nimport update from 'immutability-helper';\nimport \"../../css/PathFindingVisualizer.css\";\nimport AStar from \"./Algorithms/AStar\"\nimport Dijkstra from \"./Algorithms/Dijkstra\"\nimport BreadthFirst from \"./Algorithms/BreadthFirst\"\nimport { scryRenderedDOMComponentsWithTag } from \"react-dom/test-utils\";\n\nexport default class PathFindingVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: true,\n            grid: [],\n            mouseDown: false,\n            currentSelection: \"1\",\n            stopAnimation: false,\n            isRunningAnimation: false,\n            algoSelection: \"1\",\n            startNode: { col: 7, row: 5 },\n            endNode: { col: 7, row: 30 },\n            mouseOverNode: null,\n            stop: 0\n        };\n    }\n\n\n    createGrid() {\n        let width = 15;\n        let height = 40;\n        var grid = [];\n        var id = 0;\n\n        for (let i = 0; i < width; i++) {\n            const currentRow = [];\n            for (let j = 0; j < height; j++) {\n                let nodeState = \"none\"\n                if (i === this.state.startNode.col && j === this.state.startNode.row) {\n                    nodeState = \"start\";\n                } else if (i === this.state.endNode.col && j === this.state.endNode.row) {\n                    nodeState = \"end\";\n                }\n                let renderTime = j + i;\n                currentRow.push({\n                    col: i,\n                    row: j,\n                    state: nodeState,\n                    id: id,\n                    isRendered: false,\n                    renderTime: renderTime,\n                    weight: -1\n                });\n                id++;\n            }\n            grid.push(currentRow);\n        }\n        return (grid);\n    }\n\n    componentDidMount() {\n        this.resetGrid();\n    }\n\n\n\n    addNode(row, col) {\n        if (this.state.currentSelection === \"1\") {\n            if (this.state.grid[col][row].state === \"wall\") {\n                this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"none\" } } } }) });\n            } else if(this.state.grid[col][row].state != \"start\" && this.state.grid[col][row].state != \"end\") {\n                this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"wall\" } } } }) });\n            } \n        }   \n        else if (this.state.currentSelection === \"3\") {\n            this.state.grid[this.state.startNode.col][this.state.startNode.row].state = \"none\";\n            this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"start\" } } } }) });\n            this.state.startNode = { col: col, row: row };\n        } else if (this.state.currentSelection === \"4\") {\n            this.state.grid[this.state.endNode.col][this.state.endNode.row].state = \"end\";\n            this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"end\" } } } }) });\n            this.state.endNode = { col: col, row: row };\n        }\n    }\n\n\n    handleMouseDown(row, col) {\n        if (this.state.mouseDown === false) return;\n\n        if (this.state.currentSelection === \"1\") {\n            if (this.state.grid[col][row].state === \"wall\") {\n                this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"none\" } } } }) });\n            } else if(this.state.grid[col][row].state !== \"start\" && this.state.grid[col][row].state !== \"end\") {\n                this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"wall\" } } } }) });\n            } \n        }   \n        else if (this.state.currentSelection === \"3\") {\n            this.state.grid[this.state.startNode.col][this.state.startNode.row].state = \"none\";\n            this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"start\" } } } }) });\n            this.state.startNode = { col: col, row: row };\n        } else if (this.state.currentSelection === \"4\") {\n            this.state.grid[this.state.endNode.col][this.state.endNode.row].state = \"none\";\n            this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"end\" } } } }) });\n            this.state.endNode = { col: col, row: row };\n        }\n    }\n\n    handleMouseUp() {\n        //this.setState({ mouseDown: false });\n    }\n\n    resetGrid() {\n        clearInterval(this.state.stop);\n        this.state.stopAnimation = true;\n        this.setState({\n            isLoading: false,\n            grid: this.createGrid()\n        });\n    }\n\n    generateRandomGrid() {\n        let width = 15;\n        let height = 40;\n        var grid = [];\n        var id = 0;\n\n        let startNode = this.state.startNode;\n        let endNode = this.state.endNode;\n\n        for (let i = 0; i < width; i++) {\n            const currentRow = [];\n            for (let j = 0; j < height; j++) {\n                let randomNumber = Math.random() * 100;\n                let nodeState = \"none\";\n                if (randomNumber < 20) {\n                    nodeState = \"wall\";\n                }\n\n                if (i === startNode.col && j === startNode.row) {\n                    nodeState = \"start\";\n                } else if (i === endNode.col && j === endNode.row) {\n                    nodeState = \"end\";\n                }\n                currentRow.push({\n                    col: i,\n                    row: j,\n                    id: id,\n                    state: nodeState,\n                    weightvalue: 0,\n                    isRendered: false,\n                    weight: -1\n                });\n                id++;\n            }\n            grid.push(currentRow);\n        }\n        this.setState({\n            isLoading: false,\n            grid: grid\n        });\n    }\n\n    findPath() {\n        if (this.state.grid != null && !this.state.isRunningAnimation) {\n            let algo = null;\n            let timeInterval = 0;\n            if (this.state.algoSelection === \"1\") {\n                algo = new AStar(this.state.grid, this.state.grid[this.state.startNode.col][this.state.startNode.row], this.state.grid[this.state.endNode.col][this.state.endNode.row]);\n                timeInterval = 30;\n            } else if (this.state.algoSelection === \"2\") {\n                algo = new Dijkstra(this.state.grid, this.state.grid[this.state.startNode.col][this.state.startNode.row], this.state.grid[this.state.endNode.col][this.state.endNode.row]);\n                timeInterval = 10;\n            } else if (this.state.algoSelection === \"3\") {\n                algo = new BreadthFirst(this.state.grid, this.state.grid[this.state.startNode.col][this.state.startNode.row], this.state.grid[this.state.endNode.col][this.state.endNode.row]);\n            }\n            //redundant get rid of this if you dont need it ethan\n            if (this.state.isRunningAnimation) {\n                this.state.isRunningAnimation = false;\n            }\n\n            let output = algo.order;\n            let finalPath = algo.pathOrder;\n            let finalPathCount = algo.pathOrder.length - 1;\n\n            let count = 0;\n            let secondCount = 0;\n            this.state.stop = setInterval(\n                    function(y) {\n                        y = count;\n                        if (y >= output.length) {\n                            if (finalPathCount >= 0) {\n                                this.setState({grid: update(this.state.grid, {[finalPath[finalPathCount].col]: {[finalPath[finalPathCount].row]: {state: {$set: \"secondaryExpand\"}}}})});\n                                finalPathCount--;\n                           } else {\n                               clearInterval(this.state.stop);\n                           }\n                        } else {\n                            this.setState({grid: update(this.state.grid, {[output[y].col]: {[output[y].row]: {state: {$set: \"expand\"}}}})});\n                            count++;\n                        }\n                    }.bind(this), \n                    timeInterval, count\n                );\n        this.state.isRunningAnimation = false;\n        }\n    }\n\n    render() {\n        this.mouseDown = false;\n        if (this.state.isLoading) {\n            return <div></div>;\n        } else {\n            let grid = this.state.grid;\n            return (\n                <div className=\"center\">\n                    <h1> Pathfinding Algorithms </h1>\n                    <button onClick={() => this.generateRandomGrid()}> Generate Maze </button>\n                    <button onClick={() => this.resetGrid()}> Reset Grid </button>\n                    <button onClick={() => this.findPath()}> Find Path </button>\n                    <label htmlFor=\"Weight\">Toggle Placement</label>\n                    <select id=\"Weight\" onChange={(option) => this.setState({ currentSelection: option.target.value })}>\n                        <option value=\"1\">Wall</option>\n                        <option value=\"3\">Start Node</option>\n                        <option value=\"4\">End Node</option>\n                    </select>\n                    <label id=\"Algo\"> Select Algorithm </label>\n                    <select id=\"Algo\" onChange={(option) => this.setState({ algoSelection: option.target.value })}>\n                        <option value=\"1\"> A-Star </option>\n                        <option value=\"2\"> BreadthFirst </option>\n                    </select>\n                    <div className=\"centerGrid\" onMouseDown={() => this.state.mouseDown = true} onMouseUp={() => this.state.mouseDown = false}>\n                        {grid.map(row => {\n                            return (\n                                <div key={row[0].col} className=\"row\">\n                                    {row.map(node => {\n                                        return <Node\n                                            col={node.col}\n                                            row={node.row}\n                                            key={node.id}\n                                            renderTime={node.renderTime}\n                                            addNode={() => this.addNode(node.row, node.col)}\n                                            handleMouseDown={() => this.addNode(node.row, node.col)}\n                                            handleMouseOver={() => this.handleMouseDown(node.row, node.col)}\n                                            //handleMouseUp={() => console.log(\"hihi\")}\n                                            state={node.state}\n                                            isRendered={false}\n                                            weight={node.weight}\n                                        ></Node>;\n                                    })}\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div >\n            );\n        }\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport \"./css/App.css\";\nimport PathFindingVisualizer from \"./pages/PathFindingVisualizer/PathFindingVisualizer\";\n\nexport default function App() {\n    return (\n            <div className=\"App\">\n                <PathFindingVisualizer></PathFindingVisualizer>\n            </div>\n        );\n}\n"],"sourceRoot":""}