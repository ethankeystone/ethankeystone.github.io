{"version":3,"sources":["images/codinglogo.svg","pages/Base/Base.js","pages/Base/NavBar.js","pages/Explore/Block.js","pages/Explore/Explore.js","pages/AboutUs/AboutUs.js","pages/PathFindingVisualizer/Node.js","pages/PathFindingVisualizer/Algorithms/Pathfinder.js","pages/PathFindingVisualizer/Algorithms/AStar.js","pages/PathFindingVisualizer/Algorithms/Dijkstra.js","pages/PathFindingVisualizer/Algorithms/BreadthFirst.js","pages/PathFindingVisualizer/GenerateRandomMaze.js","pages/PathFindingVisualizer/PathFindingVisualizer.js","pages/Home/Home.js","pages/PathFindingVisualizer/PathFindingVisualizerPage.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","Base","props","children","NavBar","className","src","logo","id","alt","to","style","textDecoration","React","Component","Block","undefined","this","link","title","paragragh","Explore","AboutUs","Node","state","isLoading","color","isRendered","setState","col","row","setTimeout","bind","renderTime","r","g","b","Math","floor","join","addNode","handleMouseDown","handleMouseUp","handleMouseOver","dehover","weight","displayWeight","opacity","substring","parseInt","backgroundColor","rgb","onMouseEnter","onMouseLeave","onMouseDown","Pathfinder","grid","startNode","endNode","height","length","width","order","Array","openListOrder","pathOrder","previous","fill","map","orderIndex","currentBacktraceNode","push","node","neighbors","x","y","forEach","element","error","filter","Error","AStar","openList","closedList","gList","hList","run","smallestNode","getSmallestFCostNode","backtrace","splice","indexOf","getNeighbors","getDistance","neighborNewGScore","Contains","list","console","log","abs","getFCost","Dijkstra","distance","order_index","next","Q","min_node","getMinDistanceNode","new_distance","getNodeDistance","min_distance","distance_temp","BreadthFirst","pop","GenerateRandomMaze","i","currentRow","j","type","amountOfMountains","round","random","high","minSize","maxSize","size","generateWeightedSquare","start","findRandomSquare","end","findDistance","max","center","amountSummit","current","currentList","String","adj","getAdjOnly","step","o","includes","amountOfWalls","gridSize","prev","getAdjacent","backTrack","adjConsts","adjToCurrent","amountAdj","count","p1","p2","sqrt","pow","PathFindingVisualizer","mouseDown","currentSelection","stopAnimation","isRunningAnimation","algoSelection","mouseOverNode","preHoverState","brushSize","stop","nodeState","resetGrid","update","$set","min","nodes","newElement","clearInterval","createGrid","randomGrid","generateWeightedMaze","maze","algo","timeInterval","output","finalPath","finalPathCount","setInterval","onClick","generateWeightedRandomGrid","generateRandomGrid","findPath","toggleWeightNumber","htmlFor","onChange","option","target","value","class","onMouseUp","key","App","PathFindingVisualizerPage","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","component","Home","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb0f5d68.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/codinglogo.2f2547cc.svg\";","import React from \"react\";\nimport logo from \"../../images/codinglogo.svg\";\nimport {Link} from \"react-router-dom\";\nimport \"../../css/NavBar.css\";\n\nexport default function Base(props) {\n    return (\n            <div>\n                {props.children}\n            </div>\n        );\n}\n","import React from \"react\";\nimport logo from \"../../images/codinglogo.svg\";\nimport {Link} from \"react-router-dom\";\nimport \"../../css/NavBar.css\";\n\nexport default class NavBar extends React.Component {\n    render() {\n        return (\n                <header>\n                    <div className = \"container\">\n                    <img src={logo} className=\"App-logo\" id=\"App-logo\" alt=\"logo\" />\n                    <h1>\n                        <Link to=\"/\" style={{ textDecoration: 'none'}} className = \"button\">\n                          Coding Imagined\n                        </Link>\n                    </h1>\n                    <nav className=\"App-Header\">\n                        <ul className=\"buttons\">\n                            <li>\n                                <Link to=\"/explore\" style={{ textDecoration: 'none'}} className = \"button\">\n                                    Explore\n                                </Link>\n                            </li>\n                            <li>\n                                <Link to=\"/about\" style={{ textDecoration: 'none'}} className = \"button\">\n                                About Us\n                                </Link>\n                            </li>\n                            <li>\n                                <Link to=\"/morestuff\" style={{ textDecoration: 'none'}} className = \"button\">\n                                More Stuff\n                                </Link>\n                            </li>\n                            <li>\n                                <Link to=\"/evenMoreStuff\" style={{ textDecoration: 'none'}} className = \"button\">\n                                Even More Stuff\n                                </Link>\n                            </li>\n                        </ul>\n                    </nav>\n                    </div>\n                </header>\n            );\n    }\n}\n","import React, { Component } from \"react\";\nimport logo from \"../../images/codinglogo.svg\";\nimport \"../../css/Block.css\";\nimport {Link} from \"react-router-dom\";\n\nexport default class Block extends React.Component {\n    render() {\n        return (\n                <Link to={this.props.link == undefined ? \"/\" : this.props.link} className=\"block\" style={{ textDecoration: 'none' }}>\n                    <div className=\"title\"> {this.props.title} </div>\n                        <img src={logo} className=\"image\"/>\n                        <div className=\"projectDescription\">\n                        {this.props.paragragh}\n                    </div>\n                </Link>\n            );\n    }\n}\n","import React from \"react\";\nimport NavBar from \"../Base/NavBar\";\nimport Block from \"./Block\";\nimport \"../../css/Explore.css\";\n\nexport default function Explore() {\n    return (\n            <div>\n                <NavBar></NavBar>\n\n                <div className=\"blocks\">\n                    <Block\n                        link=\"/PathFindingVisualizer\"\n                        title=\"Path Finding Visualizer\"\n                        paragragh=\"This is a pathfinding visualzer that attempts\n                        to display the ability of several algorthms.\n                        Some included are Dijstrikas, AStar, and other funs things!\"\n                    ></Block>\n                    <Block></Block>\n                    <Block></Block>\n                    <Block></Block>\n                    <Block></Block>\n                </div>\n            </div>\n        );\n}\n","import React from \"react\";\nimport NavBar from \"../Base/NavBar.js\";\n\nexport default function AboutUs() {\n    return (\n            <div>\n                <NavBar></NavBar>\n                <div>\n                   About Us\n                </div>\n            </div>\n\n        );\n}\n","import React, { Component } from 'react';\nimport \"../../css/Node.css\"\n\nexport default class Node extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false,\n            color: \"none\",\n            isRendered: this.props.isRendered\n        }\n    }\n\n    componentDidMount() {\n        this.setState({\n            isLoading: false,\n            color: \"none\",\n            col: this.props.col,\n            row: this.props.row,\n            isRendered: false\n        });\n\n        setTimeout(\n            function () {\n                this.setState({ isRendered: true })\n            }.bind(this),\n            this.props.renderTime * 5\n        );\n    }\n    rgb(r, g, b){\n        r = Math.floor(r);\n        g = Math.floor(g);\n        b = Math.floor(b);\n        return [\"rgb(\",r,\",\",g,\",\",b,\")\"].join(\"\");\n    }\n    render() {\n        const {\n            col,\n            row,\n            addNode,\n            state,\n            handleMouseUp,\n            handleMouseDown,\n            handleMouseOver,\n            dehover,\n            weight,\n            opacity,\n            displayWeight,\n        } = this.props;\n\n        if (this.state.isLoading === true) {\n            return (\n                <div className={\"node \"}>\n                    Something really bad happened\n                </div>\n            );\n        } else {\n            if (state.substring(0,8) == \"weighted\") {\n                let weightAmount = parseInt(state.substring(8));\n                \n                if (displayWeight) {\n                    return (\n                        <div className={(this.state.isRendered === true ? \"nodeRendered \" + state : \"nodeNotRendered\")}\n                            style={{backgroundColor: this.rgb(258 - weight * 20, 60, 68)}}\n                            onMouseEnter={() => handleMouseOver(col, row)}\n                            onMouseLeave={() => { dehover(col, row) }}\n                            onMouseDown={() => { handleMouseDown(col, row) }}\n                        //onMouseEnter={() => addNode(col, row)}\n                        //onMouseUp={() => handleMouseUp()}\n                        >\n                            {weight}\n                        </div>\n                    );\n                } else {\n                    return (\n                        <div className={(this.state.isRendered === true ? \"nodeRendered \" + state : \"nodeNotRendered\")}\n                        style={{backgroundColor: this.rgb(258 - weight * 20, 60, 68)}}\n                            onMouseEnter={() => handleMouseOver(col, row)}\n                            onMouseLeave={() => { dehover(col, row) }}\n                            onMouseDown={() => { handleMouseDown(col, row) }}\n                        //onMouseEnter={() => addNode(col, row)}\n                        //onMouseUp={() => handleMouseUp()}\n                        >\n                        </div>\n                    );\n                }\n            } else {\n                if (displayWeight) {\n                    return (\n                        <div className={(this.state.isRendered === true ? \"nodeRendered \" + state : \"nodeNotRendered\")}\n                            onMouseEnter={() => handleMouseOver(col, row)}\n                            onMouseLeave={() => { dehover(col, row) }}\n                            onMouseDown={() => { handleMouseDown(col, row) }}\n                        //onMouseEnter={() => addNode(col, row)}\n                        //onMouseUp={() => handleMouseUp()}\n                        >\n                            {weight}\n                        </div>\n                    );\n                } else {\n                    return (\n                        <div className={(this.state.isRendered === true ? \"nodeRendered \" + state : \"nodeNotRendered\")}\n                            onMouseEnter={() => handleMouseOver(col, row)}\n                            onMouseLeave={() => { dehover(col, row) }}\n                            onMouseDown={() => { handleMouseDown(col, row) }}\n                        //onMouseEnter={() => addNode(col, row)}\n                        //onMouseUp={() => handleMouseUp()}\n                        >\n                        </div>\n                    );\n                }\n            }\n        }\n    }\n}\n","export default class Pathfinder {\n  constructor(grid, startNode, endNode) {\n    //initialization\n    this.grid = grid;\n    this.startNode = startNode;\n    this.endNode = endNode;\n\n    //accessibility\n    this.height = grid.length;\n    this.width = grid[0].length;\n\n    //stores order that nodes were added\n    this.order = new Array();\n\n    //stores an array of the openList array at every stage\n    this.openListOrder = new Array();\n\n    //stores order of backtrace for actual pathfinding\n    this.pathOrder = new Array();\n\n    //stores traceback - all nodes parent nodes\n    this.previous = new Array(this.height)\n      .fill({})\n      .map(() => new Array(this.width).fill({}));\n\n    //this.next() adds 1 before returning so this index\n    //is negetive one for the first iteration to return\n    //order [0]\n    this.orderIndex = -1;\n  }\n\n  //backtraces when algorithm is done running\n  backtrace() {\n    let currentBacktraceNode = this.endNode;\n    while (currentBacktraceNode != this.startNode) {\n      this.pathOrder.push(currentBacktraceNode);\n      currentBacktraceNode = this.previous[currentBacktraceNode.col][currentBacktraceNode.row];\n    }\n  }\n\n  //i dont know\n\n  //grabs neighbor nodes, if there are 2-3, array size = 2-3\n  //neighbors are nodes in 4 cardinal directions\n  getNeighbors(\n    node // i hate this i feel like im losing brain cells\n  ) {\n    let neighbors = [];\n\n    let x = node[\"col\"];\n    let y = node[\"row\"];\n\n    //4 directions\n    let positions = [\n      [-1, 0],\n      [1, 0],\n      [0, -1],\n      [0, 1]\n    ];\n\n    //for loop so i can try catch w o using max and mins and such\n    positions.forEach(element => {\n      try {\n        if (element.state != \"wall\")\n          neighbors.push(this.grid[x + element[0]][y + element[1]]);\n      } catch (error) { }\n    });\n\n    //idk why this happens :/\n    neighbors = neighbors.filter(element => {\n      return element != undefined;\n    });\n\n    return neighbors;\n  }\n\n  //returns the next node and next openList and updates index\n  next() {\n    this.orderIndex++;\n    if (this.orderIndex >= this.order.length) return false;\n    return [this.order[this.orderIndex], this.openListOrder[this.orderIndex]];\n  }\n\n  //closest thing to an abstract class\n  run() {\n    throw new Error(\"You need to impliment run()\");\n  }\n}\n","import Pathfinder from \"./Pathfinder\";\n\nexport default class AStar extends Pathfinder {\n  constructor(grid, startNode, endNode) {\n    //initialize\n    super(grid, startNode, endNode);\n\n    this.openList = new Array();\n    this.closedList = new Array();\n\n    //G Score: distance from curent node to start node (heuristically)\n    //H Score: distance from current node to end node\n    this.gList = new Array(this.height)\n      .fill(10000)\n      .map(() => new Array(this.width).fill(10000));\n    this.hList = new Array(this.height)\n      .fill(10000)\n      .map(() => new Array(this.width).fill(10000));\n\n    this.run();\n  }\n\n  //full algorithm\n  run() {\n    //return;\n    //openList starts with default of first node\n    this.openList.push(this.grid[this.startNode[\"col\"]][this.startNode[\"row\"]]);\n\n    //set starting node to 0\n    this.gList[this.startNode[\"col\"]][this.startNode[\"row\"]] = 0;\n\n    while (this.openList.length > 0) {\n      //smallestNode = smallest f cost\n      let smallestNode = this.getSmallestFCostNode();\n\n      //check while conditional\n      if (smallestNode == this.endNode) {\n        this.backtrace();\n        return;\n      }\n\n      //STORE FOR ETHAN\n      this.order.push(smallestNode);\n      this.openListOrder.push(this.openList);\n\n      //remove from openList\n      this.openList.splice(this.openList.indexOf(smallestNode), 1);\n\n      //all successor nodes are neighbors in 4 cardinal directions\n      let neighbors = this.getNeighbors(smallestNode);\n\n      neighbors.forEach(element => {\n        if (element.state === \"wall\") return;\n        //set distance from end node\n        this.hList[element[\"col\"]][element[\"row\"]] = this.getDistance(element);\n        //get current and score after travel\n        let smallestNodeGScore = this.gList[smallestNode[\"col\"]][\n          smallestNode[\"row\"]\n        ];\n        let neighborNewGScore = smallestNodeGScore + element['weight'];\n\n        //if path is better than any previous\n        if (neighborNewGScore < this.gList[element[\"col\"]][element[\"row\"]]) {\n          //update new g score\n          this.gList[element[\"col\"]][element[\"row\"]] = neighborNewGScore;\n          this.previous[element.col][element.row] = smallestNode;\n\n          //add neighbor to openList\n          if (!this.Contains(this.openList, element)) {\n            this.openList.push(element);\n          }\n        }\n      });\n    }\n\n\n    //open set is empty but goal never reached\n    return -1;\n  }\n\n  //simple helper function, takes in list and element and returns true if element in list\n  Contains(list, element) {\n    if (list.indexOf(element) != -1) {\n      console.log(list.indexOf(element));\n      return true;\n    }\n    return false;\n  }\n\n  //returns heuristic distance to endNode -> _| not /\n  getDistance(node) {\n    let distanceX = Math.abs(node[\"col\"] - this.endNode[\"col\"]) * 5;\n    let distanceY = Math.abs(node[\"row\"] - this.endNode[\"row\"]) * 5;\n    return distanceX + distanceY;\n  }\n\n  //returns the smallest cost node\n  getSmallestFCostNode() {\n    let smallestNode = this.openList[0];\n    this.openList.forEach(node => {\n      if (this.getFCost(node) < this.getFCost(smallestNode)) {\n        smallestNode = node;\n      }\n      return node;\n    });\n    return smallestNode;\n  }\n\n  //takes in node and returns its fcost\n  getFCost(node) {\n    let GCost = this.gList[node[\"col\"]][node[\"row\"]];\n    let HCost = this.hList[node[\"col\"]][node[\"row\"]];\n    let FCost = GCost + HCost;\n    return FCost;\n  }\n}\n","import Pathfinder from \"./Pathfinder\";\n\nexport default class Dijkstra extends Pathfinder {\n  constructor(grid, startNode, endNode) {\n    super(grid, startNode, endNode);\n\n    this.distance = new Array(this.height)\n      .fill(10000)\n      .map(() => new Array(this.width).fill(10000));\n\n    this.run();\n\n    while (this.order_index < this.width * this.height) {\n      console.log(this.next());\n    }\n  }\n\n  //main function, returns grid\n  run() {\n    //make Q into list of all nodes\n    const Q = [];\n    for (let x = 0; x < this.grid.length; x++) {\n      for (let y = 0; y < this.grid[0].length; y++) {\n        Q.push(this.grid[x][y]);\n      }\n    }\n\n    //set distance of start node to smallest value, 0\n    this.distance[this.startNode[\"col\"]][this.startNode[\"row\"]] = 0;\n    //main alg\n    while (Q.length != 0) {\n      let min_node = this.getMinDistanceNode(Q);\n\n      if (min_node == this.endNode) break;\n      //remove min node from openlist\n      Q.splice(Q.indexOf(min_node), 1);\n\n      //for output\n      this.order.push(min_node);\n      this.openListOrder.push(Q);\n\n      let neighbors = this.getNeighbors(min_node);\n\n      //each neighbor gets new distance calculated based off current node, and updated if its new\n      //path has a smaller (more optimized) distance from start\n      neighbors.forEach(element => {\n        let new_distance = this.getNodeDistance(min_node) + element['weight']; // right now all the weights are 1\n        if (new_distance < this.getNodeDistance(element)) {\n          this.distance[element[\"col\"]][element[\"row\"]] = new_distance;\n          this.previous[element[\"col\"]][element[\"row\"]] = min_node;\n        }\n      });\n    }\n\n    this.backtrace();\n\n    return this.distance;\n  }\n\n  //returns node in Q with minimum current distance\n  getMinDistanceNode(Q) {\n    let min_distance = 100000;\n    let min_node = Q[0];\n\n    Q.forEach(element => {\n      let distance_temp = this.distance[element[\"col\"]][element[\"row\"]];\n      if (distance_temp < min_distance && element.state != \"wall\") {\n        min_distance = distance_temp;\n        min_node = element;\n      }\n    });\n\n    return min_node;\n  }\n  //readonly\n  getNodeDistance(node) {\n    return this.distance[node[\"col\"]][node[\"row\"]];\n  }\n}\n","import Pathfinder from \"./Pathfinder\"\n\nexport default class BreadthFirst extends Pathfinder {\n\n    constructor(grid, startNode, endNode) {\n        super(grid, startNode, endNode);\n    }\n\n    run() {\n        //queue\n        let Q = new Array();\n        Q.push(this.startNode);\n\n        while (Q.length > 0) {\n            //pop off Q rather than preferring anything\n            let node = Q.pop();\n\n            if (node == this.endNode) return;\n\n            let neighbors = this.getNeighbors(node);\n\n            neighbors.forEach(element => {\n\n            });\n\n        }\n    }\n}","import { findAllInRenderedTree } from \"react-dom/test-utils\";\r\n\r\nexport default class GenerateRandomMaze {\r\n    constructor(width, height) {\r\n      \r\n\r\n    }\r\n\r\n    generateWeightedMaze(x, y) {\r\n        var grid = []\r\n        var deadEnd = []\r\n        var amountOfWalls = 0; \r\n        var gridSize = x * y;\r\n        for(let i = 0; i < x; i++) {\r\n            const currentRow = []\r\n            for (let j = 0; j < y; j++) {\r\n                currentRow.push({\r\n                    type: \"Not wall\",\r\n                    width: i,\r\n                    height: j,\r\n                });\r\n            }\r\n            grid.push(currentRow);\r\n        \r\n        }\r\n        let amountOfMountains = Math.round(Math.random() * 15) +10;\r\n        for (let i = 0; i < amountOfMountains; i++) {\r\n            let high = Math.round(Math.random() * 16) + 4;\r\n            let minSize = Math.round(Math.random() * 4) + 1;\r\n            let maxSize = Math.round(Math.random() * 5) + minSize;\r\n            let size = Math.round(Math.random() * 6) + 1;\r\n            this.generateWeightedSquare(grid, minSize, maxSize, size, high);\r\n        }\r\n       \r\n        \r\n        let start = this.findRandomSquare(grid);\r\n        let end = this.findRandomSquare(grid);\r\n        while (this.findDistance(start, end) < 20 ) {\r\n            end = this.findRandomSquare(grid);\r\n        }\r\n\r\n        grid[start[0]][start[1]].type = \"start\";\r\n        grid[end[0]][end[1]].type = \"end\";\r\n        console.log(grid);\r\n        return grid;\r\n    }\r\n\r\n    generateWeightedSquare(grid, minSize, maxSize, size, max) {\r\n        let center = this.findRandomSquare(grid);\r\n        console.log(center);\r\n        var amountSummit = Math.floor(Math.random() * (maxSize - minSize)) + minSize;\r\n        let current = grid[center[0]][center[1]];\r\n\r\n        let currentList = [];\r\n\r\n        for (let i = 0; i < amountSummit; i++) {\r\n            grid[current.width][current.height].type = \"weighted\" + String(max);\r\n            let adj = this.getAdjOnly(current.width, current.height, grid);\r\n       \r\n            currentList.push(current);\r\n\r\n            let random = Math.floor(Math.random() * adj.length);\r\n            current = adj[random];       \r\n        }\r\n\r\n        let step = Math.floor(max / size);\r\n        let iteration = 0;\r\n        let next = []\r\n\r\n        for(let i = 0; i < size; i++) {\r\n            for (let j = 0; j < currentList.length; j++) {\r\n                if (max - i * step <= 0) {\r\n                    break;\r\n                }\r\n                let adj = this.getAdjOnly(currentList[j].width, currentList[j].height, grid);\r\n                grid[currentList[j].width][currentList[j].height].type = \"weighted\" + String(max - i * step); \r\n                for (let o = 0; o < adj.length; o++) {\r\n                    if (adj[o].type.substring(0, 8) != \"weighted\") {\r\n                        if (!next.includes(adj[o])) {\r\n                            next.push(adj[o]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            currentList = next;\r\n            next = [];\r\n        }\r\n\r\n    }\r\n\r\n    maze(x,y) {\r\n        var grid = []\r\n        var deadEnd = []\r\n        var amountOfWalls = 0; \r\n        var gridSize = x * y;\r\n        for(let i = 0; i < x; i++) {\r\n            const currentRow = []\r\n            for (let j = 0; j < y; j++) {\r\n                currentRow.push({\r\n                    type: \"wall\",\r\n                    width: i,\r\n                    height: j,\r\n                });\r\n            }\r\n            grid.push(currentRow);\r\n        }\r\n        var prev = [];\r\n        var current = grid[0][1]\r\n        while(amountOfWalls < 3 * gridSize / 4) {\r\n            let adj = this.getAdjacent(current.width, current.height, grid);\r\n            if (adj.length == 0) {\r\n                current = this.backTrack(prev);\r\n                continue;\r\n            }\r\n            let random = Math.floor(Math.random() * adj.length);\r\n            grid[current.width][current.height].type = \"Not wall\";\r\n            prev.push(current);\r\n\r\n            let next = adj[random];\r\n            \r\n            current = next;                     \r\n            amountOfWalls++;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \r\n        }   \r\n\r\n        let start = this.findRandomSquare(grid);\r\n        let end = this.findRandomSquare(grid);\r\n        while (this.findDistance(start, end) < 20 ) {\r\n            end = this.findRandomSquare(grid);\r\n        }\r\n\r\n        grid[start[0]][start[1]].type = \"start\";\r\n        grid[end[0]][end[1]].type = \"end\";\r\n\r\n        return grid;\r\n    }    \r\n\r\n    backTrack(prev) {\r\n        let random = Math.floor(Math.random() * prev.length);\r\n        return (prev[random]);\r\n    }\r\n\r\n    getAdjOnly(col, row, grid) {\r\n        let adjConsts = [[1, 0], [0, 1], [-1, 0], [0, -1]];\r\n        let adj = [];\r\n\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n            try {\r\n                if (grid[col + adjConsts[i][0]][row + adjConsts[i][1]] != null) {\r\n                        adj.push(grid[col + adjConsts[i][0]][row + adjConsts[i][1]]);\r\n                }\r\n            } catch (error) { }\r\n        }\r\n        return adj;\r\n    }\r\n\r\n    getAdjacent(col, row, grid) {\r\n        let adjConsts = [[1, 0], [0, 1], [-1, 0], [0, -1]];\r\n        let adj = [];\r\n\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n            try {\r\n                if (grid[col + adjConsts[i][0]][row + adjConsts[i][1]] != null) {\r\n                    if(grid[col + adjConsts[i][0]][row + adjConsts[i][1]].type != \"Not wall\") {\r\n                        let adjToCurrent = this.getAdjOnly(col + adjConsts[i][0], row + adjConsts[i][1], grid);\r\n                        let amountAdj = 0;\r\n                        adjToCurrent.forEach(node => {\r\n                            if (node.type == \"Not wall\") {\r\n                                amountAdj ++;\r\n                            }\r\n                        })\r\n                        if(amountAdj <= 1) {\r\n                            adj.push(grid[col + adjConsts[i][0]][row + adjConsts[i][1]]);\r\n                        }\r\n                    }\r\n                }\r\n            } catch (error) { }\r\n        }\r\n        return adj;\r\n    }\r\n\r\n    findRandomSquare(grid) {\r\n        let count = 0;\r\n        while(count < 1000) {\r\n            let width = Math.floor(Math.random() * grid.length);\r\n            let height = Math.floor(Math.random() * grid[width].length);\r\n            if (grid[width][height].type == \"Not wall\") {\r\n                return [width, height];\r\n            }\r\n            count++;\r\n        }\r\n    }\r\n\r\n    findDistance(p1, p2) {\r\n        return (Math.sqrt(Math.pow(p2[0] - p1[0], 2) + Math.pow(p2[1] - p1[1], 2)));\r\n    }\r\n}","import React, { Component } from \"react\";\nimport Node from \"./Node\";\nimport update from 'immutability-helper';\nimport \"../../css/PathFindingVisualizer.css\";\nimport AStar from \"./Algorithms/AStar\"\nimport Dijkstra from \"./Algorithms/Dijkstra\"\nimport BreadthFirst from \"./Algorithms/BreadthFirst\"\nimport { scryRenderedDOMComponentsWithTag } from \"react-dom/test-utils\";\nimport { any } from \"prop-types\";\nimport GenerateRandomMaze from \"./GenerateRandomMaze\";\n\nexport default class PathFindingVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: true,\n            grid: null,\n            mouseDown: false,\n            currentSelection: \"1\",\n            stopAnimation: false,\n            isRunningAnimation: false,\n            algoSelection: \"1\",\n            startNode: { col: 7, row: 5 },\n            endNode: { col: 7, row: 30 },\n            mouseOverNode: null,\n            preHoverState: \"\",\n            brushSize: 1,\n            stop: 0,\n            weight: false\n        };\n    }\n\n\n    createGrid() {\n        let width = 15;\n        let height = 40;\n        var grid = [];\n        var id = 0;\n    \n        for (let i = 0; i < width; i++) {\n            const currentRow = [];\n            for (let j = 0; j < height; j++) {\n                let nodeState = \"none\"\n        \n                if (i === this.state.startNode.col && j === this.state.startNode.row) {\n                    nodeState = \"start\";\n                } else if (i === this.state.endNode.col && j === this.state.endNode.row) {\n                    nodeState = \"end\";\n                }\n                let renderTime = j + i;\n                currentRow.push({\n                    col: i,\n                    row: j,\n                    state: nodeState,\n                    id: id,\n                    isRendered: false,\n                    renderTime: renderTime,\n                    weight: 1,\n                    opacity: 0\n                });\n                id++;\n            }\n            grid.push(currentRow);\n        }\n        return (grid);\n    }\n\n    componentDidMount() {\n        this.resetGrid();\n    }\n\n\n   \n    addNode(row, col) {\n\n        if (!this.state.mouseDown) {\n            this.setState({ preHoverState: this.state.grid[col][row].state });\n            this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"nodeHover\" } } } }) });\n        }\n\n        if (this.state.currentSelection === \"1\") {\n            if (this.state.grid[col][row].state == \"wall\") {\n                this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"none\" } } } }) });\n            } else if (this.state.grid[col][row].state != \"start\" && this.state.grid[col][row].state != \"end\") {\n                this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"wall\" } } } }) });\n            }\n        }\n        else if (this.state.currentSelection === \"2\") { // add weight\n            this.state.grid[col][row].weight += 1;\n            this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"weighted\" + String(Math.min(this.state.grid[col][row].weight, 5)) } } } }) });\n        }\n        else if (this.state.currentSelection === \"3\") {\n            this.state.grid[this.state.startNode.col][this.state.startNode.row].state = \"none\";\n            this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"start\" } } } }) });\n            this.state.startNode = { col: col, row: row };\n        } else if (this.state.currentSelection === \"4\") {\n            this.state.grid[this.state.endNode.col][this.state.endNode.row].state = \"end\";\n            this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"end\" } } } }) });\n            this.state.endNode = { col: col, row: row };\n        }\n\n    }\n\n\n    handleMouseDown(row, col) {\n\n        if (this.state.mouseDown == false) {\n            this.setState({ preHoverState: this.state.grid[col][row].state });\n            this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"nodeHover\" } } } }) });\n            return;\n        }\n\n        if (this.state.currentSelection === \"1\") {\n            if (this.state.grid[col][row].state == \"wall\") {\n                this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"none\" } } } }) });\n            } else if (this.state.grid[col][row].state != \"start\" && this.state.grid[col][row].state != \"end\") {\n                this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"wall\" } } } }) });\n            }\n        }\n        else if (this.state.currentSelection === \"2\") { // add weight\n            this.state.grid[col][row].weight += 1;\n            this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"weighted\" + String(Math.min(this.state.grid[col][row].weight, 5)) } } } }) });\n        }\n        else if (this.state.currentSelection === \"3\") {\n            this.state.grid[this.state.startNode.col][this.state.startNode.row].state = \"none\";\n            this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"start\" } } } }) });\n            this.state.startNode = { col: col, row: row };\n        } else if (this.state.currentSelection === \"4\") {\n            this.state.grid[this.state.endNode.col][this.state.endNode.row].state = \"none\";\n            this.setState({ grid: update(this.state.grid, { [col]: { [row]: { state: { $set: \"end\" } } } }) });\n            this.state.endNode = { col: col, row: row };\n        }\n\n\n    }\n\n    //de-hover tiles not hovered over\n    dehover(row, col) {\n        if (!this.state.mouseDown) {\n            if (this.state.preHoverState != \"nodeHover\") {\n                this.state.grid[col][row].state = this.state.preHoverState;\n            }\n            else {\n                //idk\n            }\n\n        }\n    }\n\n    handleMouseUp() {\n        //this.setState({ mouseDown: false });\n    }\n\n    getBrushNodesByCenter(row, col, size) {\n        let nodes = [];\n        nodes.push(this.state.grid[col][row]);\n        for (let i = 0; i < size - 1; i++) {\n            nodes.forEach(element => {\n                let adj = this.getAdjacent(element.row, element.col);\n                adj.forEach(newElement => {\n                    if (!nodes.includes(newElement)) {\n                        nodes.push(newElement);\n                    }\n                });\n\n            });\n        }\n\n        return nodes;\n    }\n\n    resetGrid() {\n        clearInterval(this.state.stop);\n        this.state.stopAnimation = true;\n        this.setState({\n            isLoading: false,\n            grid: this.createGrid()\n        });\n    }\n\n    generateWeightedRandomGrid() {\n        this.resetGrid();\n        let width = 15;\n        let height = 40;\n        var grid = [];\n        var id = 0;\n\n        let randomMaze = new GenerateRandomMaze(width, height);\n        var randomGrid = randomMaze.generateWeightedMaze(width, height);\n\n        for (let i = 0; i < width; i++) {\n            const currentRow = [];\n            for (let j = 0; j < height; j++) {\n                let renderTime = j + i;\n                let nodeState = \"none\";\n                let weight = 0;\n                if (randomGrid[i][j].type == \"wall\") {\n                    nodeState = \"wall\";\n                } else if (randomGrid[i][j].type == \"start\") {\n                    nodeState = \"start\";\n                    this.state.startNode.col = i;\n                    this.state.startNode.row = j;\n                } else if (randomGrid[i][j].type == \"end\") {\n                    nodeState = \"end\";\n                    this.state.endNode.col = i;\n                    this.state.endNode.row = j;\n                } else if (randomGrid[i][j].type.substring(0,6) == \"weight\") {\n                    nodeState = randomGrid[i][j].type;\n                    weight = parseInt(randomGrid[i][j].type.substring(8));\n                }\n                currentRow.push({\n                    col: i,\n                    row: j,\n                    state: nodeState,\n                    id: id,\n                    isRendered: false,\n                    renderTime: renderTime,\n                    weight: weight,\n                    opacity: 0\n                });\n                id++;\n            }\n            grid.push(currentRow);\n        }\n        this.setState({\n            isLoading: false,\n            grid: grid\n        });\n    }\n    generateRandomGrid() {\n        this.resetGrid();\n        let width = 15;\n        let height = 40;\n        var grid = [];\n        var id = 0;\n\n        let randomMaze = new GenerateRandomMaze(width, height);\n        var randomGrid = randomMaze.maze(width, height);\n\n        for (let i = 0; i < width; i++) {\n            const currentRow = [];\n            for (let j = 0; j < height; j++) {\n                let renderTime = j + i;\n                let nodeState = \"none\";\n                let weight = 0;\n                if (randomGrid[i][j].type == \"wall\") {\n                    nodeState = \"wall\";\n                } else if (randomGrid[i][j].type == \"start\") {\n                    nodeState = \"start\";\n                    this.state.startNode.col = i;\n                    this.state.startNode.row = j;\n                } else if (randomGrid[i][j].type == \"end\") {\n                    nodeState = \"end\";\n                    this.state.endNode.col = i;\n                    this.state.endNode.row = j;\n                } \n                currentRow.push({\n                    col: i,\n                    row: j,\n                    state: nodeState,\n                    id: id,\n                    isRendered: false,\n                    renderTime: renderTime,\n                    weight: 1,\n                    opacity: 0\n                });\n                id++;\n            }\n            grid.push(currentRow);\n        }\n        this.setState({\n            isLoading: false,\n            grid: grid\n        });\n    }\n\n    //toggles the weight numbers in each div\n    toggleWeightNumber() {\n      this.setState({weight: !this.state.weight});\n      console.log(this.state.weight)\n    }\n\n    findPath() {\n        if (this.state.grid != null && !this.state.isRunningAnimation) {\n            let algo = null;\n            let timeInterval = 0;\n            if (this.state.algoSelection === \"1\") {\n                algo = new AStar(this.state.grid, this.state.grid[this.state.startNode.col][this.state.startNode.row], this.state.grid[this.state.endNode.col][this.state.endNode.row]);\n                timeInterval = 200;\n            } else if (this.state.algoSelection === \"2\") {\n                algo = new Dijkstra(this.state.grid, this.state.grid[this.state.startNode.col][this.state.startNode.row], this.state.grid[this.state.endNode.col][this.state.endNode.row]);\n                timeInterval = 50;\n            } else if (this.state.algoSelection === \"3\") {\n                algo = new BreadthFirst(this.state.grid, this.state.grid[this.state.startNode.col][this.state.startNode.row], this.state.grid[this.state.endNode.col][this.state.endNode.row]);\n            }\n            //redundant get rid of this if you dont need it ethan\n            if (this.state.isRunningAnimation) {\n                this.state.isRunningAnimation = false;\n            }\n\n            let output = algo.order;\n            let finalPath = algo.pathOrder;\n            let finalPathCount = algo.pathOrder.length - 1;\n\n            let count = 0;\n            let secondCount = 0;\n            this.state.stop = setInterval(\n                function (y) {\n                    y = count;\n                    if (y >= output.length) {\n                        if (finalPathCount >= 0) {\n                            this.setState({ grid: update(this.state.grid, { [finalPath[finalPathCount].col]: { [finalPath[finalPathCount].row]: { state: { $set: \"secondaryExpand\" } } } }) });\n                            finalPathCount--;\n                        } else {\n                            clearInterval(this.state.stop);\n                        }\n                    } else {\n                        this.setState({ grid: update(this.state.grid, { [output[y].col]: { [output[y].row]: { state: { $set: \"expand\" } } } }) });\n                        count++;\n                    }\n\n                }.bind(this),\n                count * timeInterval, count\n            );\n            this.state.isRunningAnimation = false;\n        }\n    }\n\n    getAdjacent(row, col) {\n        let adjConsts = [[1, 0], [0, 1], [-1, 0], [0, -1]];\n        let adj = [];\n\n\n        for (let i = 0; i < 4; i++) {\n            try {\n                if (this.state.grid[col + adjConsts[i][0]][row + adjConsts[i][1]] != null) {\n                    adj.push(this.state.grid[col + adjConsts[i][0]][row + adjConsts[i][1]]);\n                }\n            } catch (error) { }\n        }\n        return adj;\n    }\n\n    render() {\n        this.mouseDown = false;\n        if (this.state.isLoading) {\n            return <div></div>;\n        } else {\n            let grid = this.state.grid;\n            return (\n                <div className=\"center\">\n                    <button onClick={() => this.generateWeightedRandomGrid()}> Generate Weighted Maze </button>\n                    <button onClick={() => this.generateRandomGrid()}> Generate Maze </button>\n                    <button onClick={() => this.resetGrid()}> Reset Grid </button>\n                    <button onClick={() => this.findPath()}> Find Path </button>\n                    <button onClick={() => this.toggleWeightNumber()}> Toggle Weight Numbers </button>\n                    <label htmlFor=\"Weight\">Toggle Placement</label>\n                    <select id=\"Weight\" onChange={(option) => this.setState({ currentSelection: option.target.value })}>\n                        <option value=\"1\">Wall</option>\n                        <option value=\"2\">Weights</option>\n                        <option value=\"3\">Start Node</option>\n                        <option value=\"4\">End Node</option>\n                    </select>\n                    <select id=\"Brush Size\" onChange={(option) => this.setState({brushSize: option.target.value})}>\n                        <option value=\"1\">1</option>\n                        <option value=\"2\">2</option>\n                        <option value=\"3\">3</option>\n                        <option value=\"4\">4</option>\n                    </select>\n                    <label id=\"Algo\"> Select Algorithm </label>\n                    <select id=\"Algo\" onChange={(option) => this.setState({ algoSelection: option.target.value })}>\n                        <option value=\"1\"> A-Star </option>\n                        <option value=\"2\"> Dijkstra's </option>\n                        <option value=\"3\"> BreadthFirst </option>\n                    </select>\n                    <div class=\"centerGrid\" onMouseDown={() => this.state.mouseDown = true} onMouseUp={() => this.state.mouseDown = false}>\n                        {grid.map(row => {\n                            return (\n                                <div key={row[0].col} className=\"row\">\n                                    {row.map(node => {\n                                        return <Node\n                                            col={node.col}\n                                            row={node.row}\n                                            key={node.id}\n                                            renderTime={node.renderTime}\n                                            addNode={() => this.addNode(node.row, node.col)}\n                                            handleMouseDown={() => this.addNode(node.row, node.col)}\n                                            handleMouseOver={() => this.handleMouseDown(node.row, node.col)}\n                                            dehover={() => this.dehover(node.row, node.col)}\n                                            //handleMouseUp={() => console.log(\"hihi\")}\n                                            state={node.state}\n                                            isRendered={false}\n                                            weight={node.weight}\n                                            displayWeight={this.state.weight}\n                                        ></Node>;\n                                    })}\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div >\n            );\n        }\n    }\n}\n","import React from \"react\";\nimport \"../../css/App.css\";\nimport PathFindingVisualizer from \"../PathFindingVisualizer/PathFindingVisualizer\";\n\nexport default function App() {\n    return (\n            <div className=\"App\">\n                <PathFindingVisualizer></PathFindingVisualizer>\n            </div>\n        );\n}\n","import React from \"react\";\nimport NavBar from \"../Base/NavBar.js\";\nimport PathFindingVisualizer from \"./PathFindingVisualizer.js\";\nimport \"../../css/PathFindingVisualizer.css\";\nexport default function PathFindingVisualizerPage() {\n    return (\n            <div className=\"app\">\n                <PathFindingVisualizer></PathFindingVisualizer>\n            </div>\n        );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport \"./css/App.css\";\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport Base from \"./pages/Base/Base\";\nimport Explore from \"./pages/Explore/Explore\";\nimport AboutUs from \"./pages/AboutUs/AboutUs\";\nimport Home from \"./pages/Home/Home\";\nimport PathFindingVisualizerPage from \"./pages/PathFindingVisualizer/PathFindingVisualizerPage\";\n\nexport default function App() {\n    return (\n            <div className=\"App\">\n                <Base>\n                    <Router>\n                        <Switch>\n                            <Route exact path=\"/\" component={Home}/>\n                            <Route path=\"/about\" component={AboutUs}/>\n                            <Route path=\"/explore\" component={Explore}/>\n                            <Route path=\"/PathFindingVisualizer\" component={PathFindingVisualizerPage}/>\n                        </Switch>\n                    </Router>\n                </Base>\n            </div>\n        );\n}\n"],"sourceRoot":""}